!SLIDE

# Truchar y Triangular, 

"Los trucos que cualquier programador haragán tiene que saber"
--------------------------------------------------------------

Qué es TDD?
-----------

Test Driven Development.

Es una herramienta de diseño de software.

!SLIDE

2 Simples reglas:
-----------------

* En TDD escribes nuevo código únicamente si tenés un test que falla.
* Eliminar duplicación.

!SLIDE

* Diseñar en forma orgánica.
* Escribís tus propios tests.
* Tu entorno de desarrollo debe proveer una respuesta rápida a los pequeños cambios.
* Componentes altamente cohesivos y con poco acoplamiento.

!SLIDE

El mantra del TDD
-----------------

* Red             Test fallando.
* Green           Implementar rápido y sucio. 
* Refactoring.    Eliminar la duplicación.

!SLIDE

El cricked y el algibe
----------------------

![Algibe](img/algibe.jpeg)

!SLIDE

Ejemplo de TDD. Rot 13
----------------------

![Algibe](img/rot13-table.png)

!SLIDE

Green bar patterns
------------------

Algunos patrones para lograr el verde.

!SLIDE

Fake it
-------

Return a constant, gradually transform into an expression using variables.

Por qué ?

Hay dos efectos que hacen que el fake it sea poderoso:

* Psicológico:  (Greean bar feels completely different of having a red bar)
                 Podés refactorear con confianza.

* Scope Control: Los programadores son buenos todo tipo de problemas futuros.
                 FOCUS on the example.

!SLIDE

Triangulate.
------------

Only abstract when you have two or more tests.

    def suma(a, b)
      4
    end

    assert_equal 3, suma(3, 1)

!SLIDE

    def suma(a, b)
      a + b
    end

    assert_equal 3, suma(3, 1)
    assert_equal 7, suma(4, 3)

!SLIDE

Obvious implementation.
-----------------------

Como implementamos las operaciones simples?
Sólamente las implementamos y listo.

!SLIDE

One to Many
-----------

Cómo implementamos una operación que funciona para una colección de objetos?

Primero lo hacemos funcionar para uno sólo y luego hacemos que funcione
para la colección.

!SLIDE

Consejos de como empezar:
-------------------------

* Concentrarse en aprender a testear, no en el framework.
* No usar Rspec ni nada complicado.
* Instalar Ruby y usar Minitest.

!SLIDE

FIN.

Fuente: TDD by example (Kent Beck)


